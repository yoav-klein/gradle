/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.12/samples
 */

 plugins {
    id 'java'
 }

 dependencies {
    implementation 'org.springframework:spring-web:6.1.4'
 }

 repositories {
    mavenCentral()
 }

 configurations {
    // declare a resolvable configuration that is going to resolve the compile classpath of the application
    resolvable("myConf") {
        //canBeConsumed = false
        //canBeDeclared = false
        extendsFrom(implementation)
    }
}

 tasks.register('showRuntimeClasspath') {
    dependsOn configurations.runtimeClasspath

    // a configuration is an instance of FileCollection
    doLast {
        println "=== configurations.runtimeClasspath"
        println configurations.runtimeClasspath
        println "=== configurations.runtimeClasspath.getAsPath()"
        println configurations.runtimeClasspath.getAsPath()
        println "=== configurations.runtimeClasspath.allArtifacts"
        println configurations.runtimeClasspath.allArtifacts
        println "=== configurations.runtimeClasspath.allDependencies"
        println configurations.runtimeClasspath.allDependencies
        println "=== sourceSets.main.runtimeClasspath.getAsPath()"
        println sourceSets.main.runtimeClasspath.getAsPath()

    }
 }

 tasks.register('resolveRuntimeClasspath') {
    configurations.runtimeClasspath.resolve()
 }

 tasks.register('showMyConf') {
    dependsOn configurations.runtimeClasspath

    // a configuration is an instance of FileCollection
    doLast {
        println "=== configurations.myConf"
        println configurations.myConf
        println "=== configurations.myConf.getAsPath()"
        println configurations.myConf.getAsPath()
        println "=== configurations.myConf.allArtifacts"
        println configurations.myConf.allArtifacts
        /*println "=== configurations.myConf.allDependencies"
        println configurations.myConf.allDependencies
        println "=== sourceSets.main.myConf.getAsPath()"
        println sourceSets.main.myConf.getAsPath() */
    }
 }

tasks.register('uberJar', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
}
